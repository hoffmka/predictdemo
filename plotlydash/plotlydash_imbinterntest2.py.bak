import dash
import dash_core_components as dcc
import dash.dependencies as ddp
from dash.dependencies import Input, Output

import dash_html_components as html
import pandas as pd

from django_plotly_dash import DjangoDash

from django.contrib.auth.models import User
from apps.consulting.planning.models import CapacityModel
from django.db.models import OuterRef, Subquery

# Generate table
# def generate_table(dataframe, max_rows=10):
#     return html.Table(
#         # Header
#         [html.Tr([html.Th(col) for col in dataframe.columns])] +

#         # Body
#         [html.Tr([
#             html.Td(dataframe.iloc[i][col]) for col in dataframe.columns
#         ]) for i in range(min(len(dataframe), max_rows))]
#     )

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

#app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app = DjangoDash('SecondExample')   # replaces dash.Dash

app.layout = html.Div(children=[
    # dcc.Graph(
    #     id='live-update-graph',
    #     figure={
    #         'data': [
    #             {'x': df['email'], 'y': df['capacity'], 'type': 'bar', 'name': 'general'},
    #         ],
    #         'layout': {
    #             'title': 'Dash Data Visualization'
    #         }
    #     }
    # ),

    dcc.Graph(id='live-update-graph'),
    dcc.Interval(
        id='interval-component',
        interval=1*1000, # in milliseconds
        n_intervals=0
    ),

    # generate_table(df),
    
    html.Label('Dropdown'),
    dcc.Dropdown(
        options=[
            #{'label': df['email'], 'value': df['id']},
            {'label': u'Montréal', 'value': 'MTL'},
            {'label': 'San Francisco', 'value': 'SF'}
        ],
        value='MTL'
    ),
    html.Label('Multi-Select Dropdown'),
    dcc.Dropdown(
        options=[
            {'label': 'New York City', 'value': 'NYC'},
            {'label': u'Montréal', 'value': 'MTL'},
            {'label': 'San Francisco', 'value': 'SF'}
        ],
        value=['MTL', 'SF'],
        multi=True
    ),
    html.Label('Radio Items'),
    dcc.RadioItems(
        options=[
            {'label': 'New York City', 'value': 'NYC'},
            {'label': u'Montréal', 'value': 'MTL'},
            {'label': 'San Francisco', 'value': 'SF'}
        ],
        value='MTL'
    ),
    html.Label('Checkboxes'),
    dcc.Checklist(
        options=[
            {'label': 'New York City', 'value': 'NYC'},
            {'label': u'Montréal', 'value': 'MTL'},
            {'label': 'San Francisco', 'value': 'SF'}
        ],
        values=['MTL', 'SF']
    ),
    html.Label('Text Input'),
    dcc.Input(value='MTL', type='text'),
    html.Label('Slider'),
    dcc.Slider(
        min=0,
        max=9,
        marks={i: 'Label {}'.format(i) if i == 1 else str(i) for i in range(1, 6)},
        value=5,
    ),
    html.Br(),
    html.P('Reactive Input'),
    dcc.Input(id='my-id', value='initial value', type='text'),
    html.Div(id='my-div')
])

# Update Text from Input Field
@app.callback(
    Output(component_id='my-div', component_property='children'),
    [Input(component_id='my-id', component_property='value')]
)
def update_output_div(input_value):
    return 'You\'ve entered "{}"'.format(input_value)


# Multiple components can update everytime interval gets fired.
@app.callback(Output('live-update-graph', 'figure'),
              [Input('interval-component', 'n_intervals')])
def update_graph_live(n):
    # QuerySet to DataFrame
    capacity_qs_general = CapacityModel.objects.filter(capacity_type=0, user_id=OuterRef('pk'))
    qs_general = User.objects.all().annotate(capacity = Subquery(capacity_qs_general.values('capacity')))
    df_general = pd.DataFrame(list(qs_general.values('first_name','last_name', 'capacity', 'id')))

    capacity_qs_consulting = CapacityModel.objects.filter(capacity_type=1, user_id=OuterRef('pk'))
    qs_consulting = User.objects.all().annotate(capacity = Subquery(capacity_qs_consulting.values('capacity')))
    df_consulting = pd.DataFrame(list(qs_consulting.values('first_name','last_name', 'capacity', 'id')))

    fig={
            'data': [{
                'y': df_general['last_name']+', '+df_general['first_name'], 
                'x': df_general['capacity']/100*40, 
                'type': 'bar',
                'orientation': 'h',
                'name' : 'general'
            },{
                'y': df_consulting['last_name']+', '+df_consulting['first_name'], 
                'x': (df_consulting['capacity']/100*df_general['capacity'])/100*40, 
                'type': 'bar',
                'orientation': 'h',
                'name' : 'consulting'                
            }],
            'layout': {
                'title': 'Consultant\'s Capacity',
                'xaxis':{
                    'title':'hours'
                }
            }
    }

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)