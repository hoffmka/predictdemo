import dash
import dash_core_components as dcc
import dash_html_components as html

import dash.dependencies as ddp
from dash.dependencies import Input, Output

import pandas as pd

from django_plotly_dash import DjangoDash

# for querying the django model
from django.contrib.auth.models import User
from apps.consulting.planning.models import CapacityModel
from django.db.models import OuterRef, Subquery

#external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

#app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app = DjangoDash('SecondExample')   # replaces dash.Dash

app.layout = html.Div(children=[
    dcc.Graph(id='live-update-graph'),
    dcc.Interval(
        id='interval-component',
        interval=1*1000, # in milliseconds
        n_intervals=0
    ),
])

# Multiple components can update everytime interval gets fired.
@app.callback(Output('live-update-graph', 'figure'),
              [Input('interval-component', 'n_intervals')])
def update_graph_live(n):
    # QuerySet to DataFrame
    capacity_qs_general = CapacityModel.objects.filter(capacity_type=0, user_id=OuterRef('pk'))
    qs_general = User.objects.all().annotate(capacity = Subquery(capacity_qs_general.values('capacity')))
    df_general = pd.DataFrame(list(qs_general.values('first_name','last_name', 'capacity', 'id')))

    capacity_qs_consulting = CapacityModel.objects.filter(capacity_type=1, user_id=OuterRef('pk'))
    qs_consulting = User.objects.all().annotate(capacity = Subquery(capacity_qs_consulting.values('capacity')))
    df_consulting = pd.DataFrame(list(qs_consulting.values('first_name','last_name', 'capacity', 'id')))

    fig={
            'data': [{
                'y': df_general['last_name']+', '+df_general['first_name'], 
                'x': df_general['capacity']/100*40, 
                'type': 'bar',
                'orientation': 'h',
                'name' : 'general'
            },{
                'y': df_consulting['last_name']+', '+df_consulting['first_name'], 
                'x': (df_consulting['capacity']/100*df_general['capacity'])/100*40, 
                'type': 'bar',
                'orientation': 'h',
                'name' : 'consulting'                
            }],
            'layout': {
                'title': 'Consultant\'s Capacity',
                'xaxis':{
                    'title':'hours'
                }
            }
    }

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)